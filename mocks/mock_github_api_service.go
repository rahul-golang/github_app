// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/github_api_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	error "github.com/rahul-golang/github_app/error"
	models "github.com/rahul-golang/github_app/models"
	reflect "reflect"
)

// MockGithubApiService is a mock of GithubApiService interface
type MockGithubApiService struct {
	ctrl     *gomock.Controller
	recorder *MockGithubApiServiceMockRecorder
}

// MockGithubApiServiceMockRecorder is the mock recorder for MockGithubApiService
type MockGithubApiServiceMockRecorder struct {
	mock *MockGithubApiService
}

// NewMockGithubApiService creates a new mock instance
func NewMockGithubApiService(ctrl *gomock.Controller) *MockGithubApiService {
	mock := &MockGithubApiService{ctrl: ctrl}
	mock.recorder = &MockGithubApiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithubApiService) EXPECT() *MockGithubApiServiceMockRecorder {
	return m.recorder
}

// GetRepository mocks base method
func (m *MockGithubApiService) GetRepository(ctx context.Context, repository, owner string) (interface{}, *error.APPError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", ctx, repository, owner)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*error.APPError)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository
func (mr *MockGithubApiServiceMockRecorder) GetRepository(ctx, repository, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockGithubApiService)(nil).GetRepository), ctx, repository, owner)
}

// CreatePullRequest mocks base method
func (m *MockGithubApiService) CreatePullRequest(ctx context.Context, repository models.CreatePullRequest) (string, *error.APPError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", ctx, repository)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*error.APPError)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest
func (mr *MockGithubApiServiceMockRecorder) CreatePullRequest(ctx, repository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockGithubApiService)(nil).CreatePullRequest), ctx, repository)
}
